name: Cross Compilation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, aarch64]
        exclude:
          - os: windows-latest
            arch: aarch64 # Windows 环境暂不支持 aarch64 编译

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.arch }}-unknown-${{ matrix.os == 'windows-latest' && 'windows-msvc' || (matrix.os == 'macos-latest' && 'apple-darwin' || 'linux-gnu') }}
          override: true

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.arch }}-unknown-${{ matrix.os == 'windows-latest' && 'windows-msvc' || (matrix.os == 'macos-latest' && 'apple-darwin' || 'linux-gnu') }}

      - name: Package artifacts
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ext=".exe"
          else
            ext=""
          fi
          mkdir -p dist/${{ matrix.os }}-${{ matrix.arch }}
          cp target/${{ matrix.arch }}-unknown-${{ matrix.os == 'windows-latest' && 'windows-msvc' || (matrix.os == 'macos-latest' && 'apple-darwin' || 'linux-gnu') }}/release/svbony-ai-assistant$ext dist/${{ matrix.os }}-${{ matrix.arch }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-binary
          path: dist/${{ matrix.os }}-${{ matrix.arch }}/
